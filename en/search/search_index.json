{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About ISERL","text":"<p>The Intelligent Software Engineering Research Laboratory (ISERL) at Amirkabir University of Technology (Tehran Polytechnic) is a premier research facility dedicated to advancing the field of software engineering. The laboratory focuses on innovative research and development across various domains of software engineering, aiming to solve complex problems and improve software quality, reliability, and performance. ISERL provides a collaborative environment for researchers, industry professionals, and students to work together on cutting-edge projects. The laboratory is active in:</p> <ul> <li>Developing technologies related to assessing and improving the quality of processes.</li> <li>Designing, developing, and creating artifacts of software systems.</li> </ul> <p>Its goal is to automate tasks related to software engineering at various levels, from development to the final product, by utilizing artificial intelligence and compiler techniques. The outcomes include:</p> <ul> <li>Reduced costs.</li> <li>Increased efficiency for software teams.</li> </ul> <p>The laboratory operates in three areas:</p> <ol> <li>Research </li> <li>Industry </li> <li>Education</li> </ol>"},{"location":"#research-activities","title":"Research Activities","text":"<p>The research activities focus on topics such as:</p> <ul> <li>Program testing and debugging.</li> <li>Software analysis.</li> <li>Internal and external software quality assessment.</li> <li>Reverse engineering and software refactoring.</li> <li>Software methodologies.</li> </ul> <p>The laboratory includes three active research groups:</p> <ol> <li>Software Testing and Quality Assurance Group </li> <li>Software Evolution and Refactoring Group </li> <li>Requirements Engineering and Software Engineering Methodologies Group</li> </ol>"},{"location":"#industrial-activities","title":"Industrial Activities","text":"<p>The laboratory's industrial activities include:</p> <ul> <li> <p>Consultancy engineering services in:</p> </li> <li> <p>Automated software testing.</p> </li> <li>Software security and intelligent antivirus systems.</li> <li>Reverse engineering and intelligent program analysis.</li> <li>Automatic program refactoring.</li> <li>Automating software development and deployment processes.</li> </ul>"},{"location":"#educational-activities","title":"Educational Activities","text":"<p>The laboratory provides specialized courses in:</p> <ul> <li>Software testing and quality assurance.</li> <li>Secure software design and development.</li> <li>Compiler and transpiler engineering.</li> <li>Intelligent and automated software engineering.</li> <li>Clean architecture and coding.</li> </ul>"},{"location":"#mission","title":"Mission","text":"<p>Towards high-quality software systems and better development experience with Compiler 2.0 and Software 2.0.</p>"},{"location":"#vision","title":"Vision","text":"<p>To be a national leader in software engineering research and education, recognized for AUT contributions to the development of innovative solutions that transform the software industry.</p>"},{"location":"#objectives","title":"Objectives","text":"<ol> <li>Innovative Research: Conduct pioneering and world-class research to develop new methodologies, tools, and technologies solving complex problems in software engineering.</li> <li>Education and Training: Offer high-quality education and training programs to prepare and nurture the next generation of software engineers.</li> <li>Collaboration: Establish strong partnerships with industry, academia, and government to drive practical applications and innovation.</li> <li>Technology Transfer: Facilitate the transfer of research outcomes to industry to enhance software engineering practices, software systems quality, and reliable computing.</li> <li>Community Engagement: Engage with the broader software engineering community through seminars, workshops, and publications.</li> </ol>"},{"location":"#additional-information","title":"Additional Information","text":"<p>For a detailed list of services and products offered by the laboratory, please:</p> <ul> <li>Visit the related pages on the laboratory's website.  </li> <li>Use the provided contact link to reach out to us.</li> </ul> <p>Contact Us</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":"How can I participate in the lab? <p>Interested students can submit their resumes along with a brief description of their areas of interest to <code>zakeri@aut.ac.ir</code>.  After review/interview, they may have the opportunity to participate in research projects, software development, or data analysis.  </p> Does participation in the lab require specific skills? <p>Yes, depending on the type of project, students need skills such as programming, data analysis, software engineering, or machine learning. However, if you are a beginner, the lab provides an opportunity for learning and growth.  </p> What types of projects are conducted in the lab? <p>Projects involve research in software engineering, artificial intelligence, software optimization, advanced system architectures, and data analysis. Depending on students' interests, participation in applied projects is also possible.  </p> Are there any special benefits to collaborating with the lab? <p>Yes! Benefits include access to research resources, working on innovative projects, gaining practical experience, publishing joint papers, and networking with experts.  </p> Is financial support or payment available? <p>Financial support is available for students in some research projects. Additionally, in applied and industrial projects, payment is possible.  </p> Can students conduct their thesis research in the lab? <p>Yes! The lab supports thesis research related to its areas of study and provides scientific guidance as well as access to laboratory tools and data.  </p> How can I contact the lab? <p>Students can get in touch with the research team via email, in-person meetings, or the lab's website. Additionally, Q&amp;A sessions or training workshops are sometimes held.  </p> <p>Contact Lab Management</p>"},{"location":"people/","title":"People","text":""},{"location":"people/#lab-director","title":"Lab Director","text":"<p> Dr. Morteza Zakeri Ph.D. in Computer Engineering Software and AI   |  |  | </p>"},{"location":"people/#phd-students","title":"PhD Students","text":"<p> Full Name  - Major: Computer Engineering  - Specialization:  - Software  - Research Areas: Software Testing, Deep Learning, Software Security  |  | </p> <p> Full Name  Major: Computer Engineering  Specialization: Software  Research Areas: Software Testing, Deep Learning, Software Security  |  | </p>"},{"location":"people/#msc-students","title":"M.Sc. Students","text":"<p> Full Name  Major: Computer Engineering  Specialization: Software  Research Areas: Software Testing, Deep Learning, Software Security  |  | </p> <p> Full Name  Major: Computer Engineering  Specialization: Software  Research Areas: Software Testing, Deep Learning, Software Security  |  | </p>"},{"location":"people/#bsc-students","title":"B.Sc. Students","text":"<p> Alireza Paksaz  Field of Study: Computer Engineering  Specialization: Software  Research Areas: Games, Game Development, Large Language Models  |  | </p> <p> Full Name  Major: Computer Engineering  Specialization: Software  Research Areas: Software Testing, Deep Learning, Software Security  |  | </p>"},{"location":"people/#alumni","title":"Alumni","text":""},{"location":"products/","title":"Products","text":""},{"location":"products/#intelligent-antivirus","title":"Intelligent Antivirus","text":"<ul> <li> <p> Installation in 5 Minutes</p> <p>Fast and easy installation on any operating system, with the ability to quickly scan all executable and non-executable files.</p> <p> Get Started</p> </li> <li> <p> Zero-Day Detection</p> <p>Real-time detection of unknown vulnerabilities and zero-day threats using machine learning algorithms.</p> <p> Learn More</p> </li> <li> <p> Detection of Non-Executable Malware</p> <p>Capable of detecting malware hidden in non-executable files such as PDFs and Office documents.</p> <p> Learn More</p> </li> <li> <p> Family Detection</p> <p>Compares against a large, up-to-date database of malicious files, analyzes behavior, and detects malware families.</p> <p> Learn More</p> </li> </ul>"},{"location":"products/#automatic-refactoring-engine","title":"Automatic Refactoring Engine","text":"<ul> <li> <p> CodART Automatic Refactoring Engine</p> <p>Detects and applies over 18 software refactoring operators, increasing the speed of quality assurance teams.</p> <p>View</p> </li> </ul>"},{"location":"services/","title":"Services","text":"<p>The Intelligent Software Engineering Lab offers a range of specialized services in the field of software engineering, including software testing and quality assurance, requirements engineering, software development and optimization, as well as technical consulting. The lab's services are categorized into different sections, and each service is assigned a unique code for ordering and tracking purposes.</p> Service Documentation Information <p>Intelligent Software Engineering Lab Services List \u2013 Amirkabir University of Technology (Tehran Polytechnic) Field: Educational and Consulting Engineering Services in the Field of Computer Engineering</p> <p>Author: Morteza Zakeri</p> <p>Revision 1.2</p>"},{"location":"services/#software-product-testing-and-quality-assurance-group","title":"Software Product Testing and Quality Assurance Group","text":"Order Code Group, Level, and Service Title 11 Basic Practical Training Courses (Level 1) 111 Software Functional Testing (test levels, test culture, tester roles, unit and integration testing, system testing) 112 Security Testing (failure testing, error injection, fuzz testing, penetration testing, penetration testing scenarios) 113 Performance Testing (basic tests, smoke, load, stress, capacity, ramp-up, stability, breaking point, rapid changes, performance evaluation metrics, performance testing scenarios) 12 Advanced Practical Training Courses (Level 2) 121 Advanced Software Testing (regression testing, return testing, model-based testing, model-driven testing, continuous testing, testing and evaluation of machine learning models (Software 2.0), strengthening and optimizing the test suite, super testing) 122 Automated Software Testing (automation of test data generation, injection and monitoring, random-adaptive testing, search-based testing, symbolic execution testing, concolic testing) 123 Software Debugging (dynamic analysis, spot analysis, fault localization, fault prediction, program repair) 124 Identification and Implementation of Testing Tools, Frameworks, Platforms, and Studios for Testing, Debugging, and Dynamic Software Analysis 13 Customized Training Course on Software Testing and Quality Assurance (select topics from above) 14 Engineering, Consulting, and Product Development Services 141 Creation and Execution of Functional Testing for legacy codebases (web applications, mobile applications, desktop applications) 142 Creation and Execution of Functional Testing for developing codebases (web applications, mobile applications, desktop applications) 143 Installation and Deployment of Automated Testing Tools, tailored to the product development stack (LLM-based and compiler-based tools) 144 Measuring the performance and effectiveness of testing (testability) of software projects and estimating test code technical debt (test debt) 145 Optimizing and strengthening the test suite of software projects and reducing test code technical debt, identifying and repairing vulnerabilities 146 Creation and execution of security testing (for web applications, mobile applications, desktop applications, firmware, Software 2.0) 147 Creation and execution of performance testing (for web applications, mobile applications, desktop applications, firmware, Software 2.0) 148 Consulting and guidance on the implementation of quality assurance and software testing standards 15 Issuing Quality Certification for Software Products (External Quality) 16 Customized engineering, consulting, and product development services in software testing and quality assurance (select topics from above)"},{"location":"services/#software-development-quality-assurance-group","title":"Software Development Quality Assurance Group","text":"Order Code Group, Level, and Service Title 21 Basic Practical Training Courses (Level 1) 211 Clean Code (naming conventions, SOLID, functions, classes, comments, code formatting) 212 Clean Architecture (architecture type, architectural style, architecture description, 4+1 view model, clean architecture principles, separation from the main sequence) 213 Clean Coder (the ability to say yes or no, teamwork, time management, estimation, stress management, version control for product code and testing) 214 Secure Coding (data validation, authentication and access control, encryption, session management, exception handling, security requirements, code obfuscation) 22 Advanced Practical Training Courses (Level 2) 221 Principles and Patterns in Software Engineering (SOLID, PHAME, analysis patterns, design patterns, architecture patterns, anti-patterns, refactoring patterns) 222 Techniques for program refactoring, restructuring, automated software refactoring, and automated measurement of software quality attributes 223 Techniques in re-engineering, software clustering, extraction and migration of software architecture, migration to System 2.0 224 Identification and implementation of tools, frameworks, platforms, and studios for static analysis, refactoring, and development quality assurance 23 Customized Training Course on Software Development Quality Assurance (select topics from above) 24 Engineering, Consulting, and Product Development Services 241 Measuring internal quality attributes\u2014maintainability and evolvability of software (testability, comprehensibility, reusability, readability, modifiability, flexibility, consistency, analyzability) 242 Improving internal quality attributes\u2014maintainability and evolvability of software (testability, comprehensibility, reusability, readability, modifiability, flexibility, consistency, analyzability) 243 Measuring external quality attributes\u2014software dependability (reusability, performance and scalability, security, safety, reliability, accessibility) 244 Improving external quality attributes\u2014software dependability (usability, performance and scalability, security, safety, reliability, accessibility) 245 Implementation of \u201cDesign by Contract\u201d and cleanup of software source code in accordance with clean code principles while reducing technical debt in code 246 Refactoring software design and source code in accordance with clean architecture principles and reducing design technical debt 247 Re-engineering and refactoring programs, migrating software architecture to large-scale systems, and reducing architectural technical debt 248 Consulting and mentoring on the identification and implementation of software development quality standards (e.g., ISO/IEC 25010) 25 Issuing Quality Certification for Software Development (Internal Quality) 26 Customized engineering, consulting, and product development services in software development quality (select topics from above)"},{"location":"services/#requirements-engineering-and-software-development-methodologies-group","title":"Requirements Engineering and Software Development Methodologies Group","text":"Order Code Group, Level, and Service Title 31 Basic Practical Training Courses (Level 1) 311 Agile Requirements Engineering (extraction, analysis, and specification of requirements; requirements templates in agile software development; measurement and improvement of requirements quality) 312 Introduction to common approaches and cultures in agile software development (TDD, BDD, DevOps, MLOps, CI/CD) 313 Management of software and IT projects (size and cost estimation, project status assessment, types of technical debt and their management) 32 Advanced Practical Training Courses (Level 2) 321 Automated Requirements Engineering (detection and repair of requirements smells, generation of acceptance tests, creation of conceptual models from requirements, code generation from requirements, generation of documentation from code, repair of traceability links) 322 Systematic research and presentation techniques in software engineering (SMS, SLR, MVLR), computational thinking, and reverse computing 323 Compiler engineering, large language models, and the design and development of domain-specific languages (for querying, for directive engineering, for data description) 324 Identification and implementation of tools, frameworks, platforms, and studios for requirements engineering and project documentation 33 Customized Training Course (select topics from above) 34 Engineering, Consulting, and Product Development Services 341 Extraction of the software requirements document, analysis, and modeling of requirements for a new software system 342 Extraction of the organization's business process model (BPMN) and creation of services based on System 2.0 (large language models) 343 Designing checklists and generating acceptance tests for software validation (acceptance testing) 344 Creating conceptual models in UML from the software requirements document 345 Designing and normalizing software databases in accordance with the requirements document 346 Creation and deployment of domain-specific languages (for development, for directive engineering, for search and reporting) 347 Extraction and repair of the software requirements document and design and implementation documents for legacy codebases 348 Creation and repair of traceability links for legacy codebases 35 Issuing Quality Certification for Software Requirements and Documentation (Validation) 36 Customized engineering, consulting, and product development services in requirements engineering and software methodologies (select topics from above)"},{"location":"services/#order","title":"Order","text":"<p>\ud83c\udf31 The Intelligent Software Engineering Lab is ready to provide specialized services to enhance the quality, security, and performance of your software. To order services, please contact the lab using the contact information below:</p> <p>Order</p>"},{"location":"services/#how-to-order-services","title":"How to Order Services","text":"<ol> <li>Review the list of services and select your desired service  </li> <li>Find the corresponding service code from the provided list  </li> <li>Send your order request via email to <code>zakeri@aut.ac.ir</code> or by calling the lab at +98(21)64545108  </li> <li>Have the lab team review the details and provide additional explanations  </li> <li>Execute the order and receive related reports</li> </ol>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2025/04/28/comparison-of-c-and-c-differences-applications-and-advantages/","title":"Comparison of C and C++: Differences, Applications, and Advantages","text":"<p>In the programming world, the languages C and C++ play a very important role. Both languages share many similarities, but their key differences have led each to be more popular in specific areas. In this post, we will examine the differences, applications, and advantages of each language.</p>"},{"location":"blog/2025/04/28/comparison-of-c-and-c-differences-applications-and-advantages/#-history-and-design-philosophy","title":"\ud83d\udd39 History and Design Philosophy","text":"<ul> <li>C was developed in the 1970s by Dennis Ritchie at Bell Labs. The goal of this language was to create a low-level language with flexible capabilities for the UNIX operating system.</li> <li>C++ was developed in the 1980s by Bjarne Stroustrup. By incorporating object-oriented programming into C, this language provides developers with enhanced capabilities.</li> </ul> <p>A sample \"Hello World!\" program in each language is shown in the code snippets below.</p> CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>"},{"location":"blog/2025/04/28/comparison-of-c-and-c-differences-applications-and-advantages/#-key-differences-between-c-and-c","title":"\ud83d\udd39 Key Differences Between C and C++","text":"Feature C C++ Programming Paradigm Procedural Object-oriented + Procedural Memory Management Manual (<code>malloc</code>, <code>free</code>) Automatic (<code>new</code>, <code>delete</code> plus smart pointer features) Classes and Objects Not supported Supported Standard Library Limited (<code>stdio.h</code>, <code>stdlib.h</code>) More extensive (STL including <code>vector</code>, <code>map</code>, <code>set</code>) Type Safety Lower Higher (e.g., function overloading, type safety mechanisms) Execution Speed Faster (with minimal overhead) Slightly slower (due to object-oriented abstractions) Primary Use Case Operating systems, drivers, low-level software Complex software, games, graphics engines, scientific tools"},{"location":"blog/2025/04/28/comparison-of-c-and-c-differences-applications-and-advantages/#-applications-of-c-and-c","title":"\ud83d\udd39 Applications of C and C++","text":"<p>\u2705 C: - Development of operating systems (e.g., UNIX and Linux) - Low-level programming and management of memory and hardware - Microcontrollers and embedded systems - Development of compilers and language processors</p> <p>\u2705 C++: - Development of complex software and software engineering tools - Design of computer games and graphics engines (e.g., Unreal Engine) - Artificial intelligence and processing of complex data - Financial applications and numerical computations</p>"},{"location":"blog/2025/04/28/comparison-of-c-and-c-differences-applications-and-advantages/#-is-c-a-replacement-for-c","title":"\ud83d\udd39 Is C++ a Replacement for C?","text":"<p>No! While C++ offers advanced features such as object-oriented programming, improved memory management, and the use of templates, C remains the best choice for projects that require complete control over the hardware.</p> <p>Therefore, choosing between C and C++ depends on the needs of your project! If you are developing a low-level system, C is the better option. If you require flexible and object-oriented features, C++ is the right choice.</p> <p>\ud83d\udccc Which language do you use more? What are your thoughts on the differences between C and C++?</p>"},{"location":"blog/2025/04/28/-welcome-to-the-intelligent-software-engineering-lab/","title":"\ud83c\udf89 Welcome to the Intelligent Software Engineering Lab!","text":"<p>The Intelligent Software Engineering Lab serves as a dynamic platform for innovation, research, and the development of advanced software systems.</p> <p>Here, we seek innovative solutions to improve software quality, enhance system performance, and tackle complex software engineering challenges. By leveraging artificial intelligence, data analytics, and modern software architectures, we are committed to building a smarter and more sustainable future.</p>"},{"location":"blog/2025/04/28/-welcome-to-the-intelligent-software-engineering-lab/#-why-choose-us","title":"\ud83d\udd39 Why Choose Us?","text":"<ul> <li>\u2714\ufe0f Specialized research in optimization and artificial intelligence  </li> <li>\u2714\ufe0f Development of automated tools to enhance software quality  </li> <li>\u2714\ufe0f Analyzing software architecture challenges and delivering effective solutions  </li> <li>\u2714\ufe0f Collaborating with leading researchers and experts in the field of software  </li> </ul> <p>Welcome to the world of research, innovation, and progress! \ud83c\udf31\u2728 We eagerly look forward to collaborating and exchanging knowledge with you.</p> <p>\ud83d\udce9 For further communication, please send us your questions and suggestions.</p> <p>Contact Lab Management</p>"},{"location":"checklist/","title":"Checklists","text":""},{"location":"checklist/#welcome-to-iserl-checklists","title":"Welcome to ISERL Checklists","text":"<p>Dear Students,</p> <p>Welcome! I am honored that you have selected me as your referee, examiner, or thesis supervisor. Guiding you through this pivotal stage of your academic journey is a responsibility I take with great enthusiasm and dedication. My aim is to not only support you in meeting the requirements of your research but also to help you cultivate critical thinking, technical skills, and a professional approach that will serve you well beyond this thesis.</p> <p>As your Supervisor/Examiner, I expect open and consistent communication, adherence to deadlines, and a commitment to producing high-quality work. In return, you can rely on me for guidance, constructive feedback, and mentorship throughout the research and writing process. I am here to support you in navigating challenges, refining your ideas, and ensuring that your thesis aligns with the highest academic standards.</p> <p>I encourage you to approach this experience with curiosity, determination, and a willingness to embrace both the successes and learning moments that research inevitably brings. Together, we will work to ensure that your thesis not only fulfills academic expectations but also reflects your unique potential and the depth of your exploration into computer science.</p> <p>Let us collaborate to make this journey a rewarding and enriching experience for your academic and professional growth.</p> <p>Kind regards,</p> <p>Morteza</p>"},{"location":"checklist/#about-iserl-checklists","title":"About ISERL Checklists","text":"<p>A checklist helps students improve the quality of their proposals and theses by ensuring they systematically address all critical components, reducing the risk of missing key elements. It provides a structured approach to reviewing research objectives, methodology, logical flow, citation accuracy, and formatting consistency. Additionally, it encourages self-assessment and helps maintain clarity and coherence, leading to a well-organized and high-quality academic document. In essence, it acts as a safeguard against oversight, reinforcing thoroughness and professionalism in research writing.</p>"},{"location":"checklist/#checklists-instructions","title":"Checklists Instructions","text":"<p>Submit the completed checklist alongside your proposal or thesis as part of the mandatory requirements for the review/supervising process. Ensure that all items on the checklist are addressed thoroughly to facilitate an efficient and comprehensive evaluation.</p>"},{"location":"checklist/#bsc-students","title":"B.Sc. students","text":"<ul> <li>B.Sc. project proposal checklist</li> <li>B.Sc. project defense checklist</li> </ul>"},{"location":"checklist/#msc-students","title":"M.Sc. students","text":"<ul> <li>M.Sc. thesis proposal checklist</li> <li>M.Sc. thesis defense checklist</li> </ul>"},{"location":"checklist/#phd-students","title":"Ph.D. students","text":"<ul> <li>Ph.D. dissertation proposal checklist</li> <li>Ph.D. dissertation defense checklist</li> </ul>"},{"location":"checklist/bsc_project/","title":"\ud83d\udccc B.Sc. Project","text":""},{"location":"checklist/bsc_project/#proposal-quality-assessment-checklist","title":"Proposal Quality Assessment Checklist","text":"<p>A well-structured B.Sc. project proposal is essential for setting the foundation of a strong research project. Here's a quality assessment checklist tailored for computer science bachelor\u2019s thesis proposals.</p> <p>Students should review each item before submitting their B.Sc. proposal to me.</p>"},{"location":"checklist/bsc_project/#1-general-structure-and-formatting","title":"1. General Structure and Formatting","text":"<ul> <li> Title page includes the thesis title, student\u2019s name, supervisor\u2019s name, and institution details</li> <li> Uses correct formatting style (e.g., IEEE, ACM, APA) as required by the department  </li> <li> Page numbering, font consistency, and margins are properly set </li> <li> The English font size is 2pt smaller than the Persian font size</li> <li> Uses standard styles in MS-Office Word or uses LaTeX engine for typesetting the proposal</li> <li> All figures and tables have captions and are referred to in the main text.</li> </ul>"},{"location":"checklist/bsc_project/#2-research-problem-and-objectives","title":"2. Research Problem and Objectives","text":"<ul> <li> Clearly defines a specific research problem and its significance in computer science</li> <li> At Least one minor contribution has been mentioned in the Introduction section.</li> <li> Objectives are precise, achievable, and measurable </li> <li> Proposal states why the problem is relevant and justifies the research</li> </ul>"},{"location":"checklist/bsc_project/#3-background-and-literature-review","title":"3. Background and Literature Review","text":"<ul> <li> Provides sufficient background on the topic for understanding the context  </li> <li> Literature review covers key research papers, theories, and existing solutions  </li> <li> Identifies gaps in existing work and explains how the proposed research addresses them  </li> <li> Cites references correctly using the required citation style </li> <li> State-of-the-art papers (published in the last two years) have been discussed, and their problems have been explained clearly.</li> <li> Base papers have been selected from top-tier journals and conferences in Computer Science</li> </ul>"},{"location":"checklist/bsc_project/#4-proposed-methodology","title":"4. Proposed Methodology","text":"<ul> <li> Clearly outlines the methodology (e.g., algorithm design, software development, experimental study)  </li> <li> Specifies data sources, tools, technologies, frameworks, or programming languages used  </li> <li> Defines the evaluation criteria for success (e.g., performance metrics, accuracy, efficiency)  </li> <li> Identifies possible limitations or challenges in implementation</li> <li> Uses standard UML diagrams to explain the proposed approach architecture/flowchart.</li> </ul>"},{"location":"checklist/bsc_project/#5-expected-outcomes-and-contributions","title":"5. Expected Outcomes and Contributions","text":"<ul> <li> States expected results and contributions to the field of computer science  </li> <li> Explains how findings will be validated (e.g., testing, comparative analysis, real-world applications)  </li> <li> Discusses the broader impact of the research on technology and society</li> </ul>"},{"location":"checklist/bsc_project/#6-ethical-and-practical-considerations","title":"6. Ethical and Practical Considerations","text":"<ul> <li> Addresses any ethical concerns related to data usage, privacy, security, or AI bias  </li> <li> Defines any required approvals, such as institutional ethics reviews (where possible)</li> <li> Confirms feasibility based on available resources, timeline, and expertise</li> </ul>"},{"location":"checklist/bsc_project/#7-timeline-and-work-plan","title":"7. Timeline and Work Plan","text":"<ul> <li> Presents a clear timeline with milestones for completion (Gantt Chart)</li> <li> Defines major phases such as research, development, testing, and documentation  </li> <li> Shows realistic scheduling to avoid delays</li> </ul>"},{"location":"checklist/bsc_project/#8-writing-quality-and-clarity","title":"8. Writing Quality and Clarity","text":"<ul> <li> Ensures the proposal is well-structured and logically flows between sections</li> <li> Uses concise, professional language without grammatical errors  </li> <li> Avoids jargon or ambiguous terms that may confuse readers  </li> </ul>"},{"location":"checklist/bsc_project/#9-supervisor-specific-requirements","title":"9. Supervisor-Specific Requirements","text":"<ul> <li> Adheres to any guidelines set by the supervisor or department</li> <li> Includes any additional materials (e.g., project requirements, feasibility study)</li> <li> The proposal has been reviewed and proofread multiple times before submission for review</li> </ul>"},{"location":"checklist/bsc_project/#project-quality-assessment-checklist","title":"Project Quality Assessment Checklist","text":"<p>This checklist ensures that all required materials are submitted and are in a ready state for review before your B.Sc. project viva session. Refer to the above checklist plus the following items (Optional items marked):</p>"},{"location":"checklist/bsc_project/#1-project-document","title":"1. Project Document","text":"<ul> <li> Finalized thesis document adhering to the department\u2019s formatting guidelines </li> <li> All sections are complete, including the abstract, introduction, literature review, methodology, results, conclusions, and future work  </li> <li> Figures, tables, and equations are numbered and cross-referenced within the text  </li> <li> All references are correctly cited using the specified citation style (e.g., IEEE, ACM, APA, etc.)  </li> <li> Includes a signed plagiarism report or similarity index document as per institutional policy  </li> <li> An approval form signed by the supervisor  </li> </ul>"},{"location":"checklist/bsc_project/#2-replication-package","title":"2. Replication Package","text":"<ul> <li> Complete source code of the developed algorithm, tool, or software  </li> <li> Dataset(s) used for training, validation, testing, or experiments  </li> <li> Parameter settings and configurations for the proposed algorithm or tool  </li> <li> Log files or raw results from experiments (if exists any)  </li> <li> Scripts for data preprocessing, analysis, or result generation  (if exists any)</li> <li> Any proprietary tools or libraries are accompanied by license information (if applicable)  </li> </ul>"},{"location":"checklist/bsc_project/#3-running-instructions","title":"3. Running Instructions","text":"<ul> <li> A clear README file explaining how to set up and run the replication package  </li> <li> Details of the runtime environment, including operating system, software dependencies, and versions  </li> <li> Step-by-step instructions for replicating key results or validating claims made in the thesis  </li> <li> Includes sample input files and output examples for verification  </li> </ul>"},{"location":"checklist/bsc_project/#4-technical-documentation-optional","title":"4. Technical Documentation (Optional)","text":"<ul> <li> Functional and technical documentation for the developed system, tool, or algorithm  </li> <li> Includes descriptions of the system\u2019s architecture, design, or flowcharts (where applicable)  </li> <li> UML diagrams or equivalent visual representations (if needed)  </li> <li> Performance analysis or evaluations that support the claims in the thesis  </li> </ul>"},{"location":"checklist/bsc_project/#5-presentation-slides","title":"5. Presentation Slides","text":"<ul> <li> Presentation slides for the viva session summarizing the thesis  </li> <li> Covers key areas such as the research problem, methodology, results, and contributions  </li> <li> Includes visuals like charts, graphs, and tables for effective communication  </li> <li> Proofread and rehearsed for clarity and timing  </li> </ul>"},{"location":"checklist/bsc_project/#6-supporting-documents-optional","title":"6. Supporting Documents (Optional)","text":"<ul> <li> Copies of published papers or conference presentations based on the thesis work (if any)  </li> <li> Permission letters for using proprietary or third-party datasets/tools (if applicable)  </li> <li> Ethics approval forms for human or animal studies (if applicable)  </li> </ul>"},{"location":"checklist/bsc_project/#7-thesis-submission-formalities","title":"7. Thesis Submission Formalities","text":"<ul> <li> Submission of a soft copy (PDF format) of the thesis and all artifacts to the supervisor  </li> <li> Submission of a printed version (if required) as per institutional policy  </li> <li> Compliance with file naming conventions specified by the department  </li> <li> Submission of all materials through the required platform or method (e.g., email, repository, physical medium)  </li> </ul>"},{"location":"checklist/bsc_project/#8-poster-for-visual-presentation-optional","title":"8. Poster for Visual Presentation (Optional)","text":"<ul> <li> A well-designed poster summarizing the thesis  </li> <li> Highlights key areas such as objectives, methodology, key results, and contributions  </li> <li> Uses clear and readable formatting with relevant visuals  </li> <li> Prepared for conference or exhibition presentation (if applicable)  </li> </ul>"},{"location":"checklist/msc_thesis/","title":"\ud83d\udccc M.Sc. Thesis","text":""},{"location":"checklist/msc_thesis/#proposal-quality-assessment-checklist","title":"Proposal Quality Assessment Checklist","text":"<p>A well-structured proposal is essential for establishing a strong research foundation. This checklist helps ensure the quality of M.Sc. thesis proposals. It incorporates the higher academic standards and rigor expected of master's-level research while retaining essential structural and formatting guidelines. </p> <p>Students should review each item before submitting their M.Sc. proposal to me.</p>"},{"location":"checklist/msc_thesis/#1-general-structure-and-formatting","title":"1. General Structure and Formatting","text":"<ul> <li> Title page includes the thesis title, student\u2019s name, supervisor\u2019s name, and institution details  </li> <li> Uses correct formatting style (e.g., IEEE, ACM, APA) as required by the department  </li> <li> Page numbering, font consistency, and margins are properly set  </li> <li> The English font size is 2pt smaller than the Persian font size (if bilingual)  </li> <li> Uses standard styles in MS Word or a LaTeX engine for typesetting the proposal  </li> <li> All figures and tables have captions and are consistently referred to in the main text</li> <li> Includes a list of abbreviations and acronyms where necessary</li> </ul>"},{"location":"checklist/msc_thesis/#2-research-problem-and-objectives","title":"2. Research Problem and Objectives","text":"<ul> <li> Clearly defines a significant and novel research problem with academic or industrial relevance</li> <li> At least three contributions (one major contribution and two minor contributions) are mentioned and listed the introduction</li> <li> Objectives are precise, measurable, and aligned with the research problem </li> <li> Proposal explains why the problem is worth investigating and provides a gap analysis </li> </ul>"},{"location":"checklist/msc_thesis/#3-background-and-literature-review","title":"3. Background and Literature Review","text":"<ul> <li> Provides sufficient technical and theoretical background for understanding the research context  </li> <li> Literature review critically evaluates key research papers, theories, and methodologies </li> <li> Identifies gaps in existing work and explains how the research will address them  </li> <li> Cites references correctly using the required citation style  </li> <li> Includes state-of-the-art publications (within the last 2 years)  </li> <li> Base papers are selected from top-tier journals or conferences in computer science </li> </ul>"},{"location":"checklist/msc_thesis/#4-proposed-methodology","title":"4. Proposed Methodology","text":"<ul> <li> Clearly outlines the methodology (e.g., system design, algorithm development, empirical study)  </li> <li> Specifies data sources, tools, technologies, frameworks, or programming languages used  </li> <li> Defines the evaluation metrics or criteria for success (e.g., scalability, accuracy, precision)  </li> <li> Identifies limitations, assumptions, and challenges in implementation  </li> <li> Utilizes appropriate UML diagrams, flowcharts, or system architectures for clarity  </li> </ul>"},{"location":"checklist/msc_thesis/#5-expected-outcomes-and-contributions","title":"5. Expected Outcomes and Contributions","text":"<ul> <li> States the expected scientific contributions and their impact on the field of computer science  </li> <li> Explains how results will be validated (e.g., experimental testing, comparative analysis)  </li> <li> Discusses potential real-world applications or societal impacts of the research  </li> </ul>"},{"location":"checklist/msc_thesis/#6-ethical-and-practical-considerations","title":"6. Ethical and Practical Considerations","text":"<ul> <li> Addresses any ethical concerns related to data usage, privacy, security, or AI bias  </li> <li> Defines any required approvals, such as institutional ethics reviews (if applicable)  </li> <li> Confirms feasibility based on available resources, time, and expertise </li> </ul>"},{"location":"checklist/msc_thesis/#7-timeline-and-work-plan","title":"7. Timeline and Work Plan","text":"<ul> <li> Presents a comprehensive timeline with milestones for each major phase (using a Gantt chart or similar)  </li> <li> Includes detailed phases such as literature review, methodology design, implementation, testing, and thesis writing  </li> <li> Demonstrates realistic scheduling to avoid delays  </li> </ul>"},{"location":"checklist/msc_thesis/#8-writing-quality-and-clarity","title":"8. Writing Quality and Clarity","text":"<ul> <li> Ensures the proposal is logically organized with clear transitions between sections  </li> <li> Uses formal, precise, and professional language free from grammatical errors  </li> <li> Avoids redundancy and minimizes technical jargon where unnecessary  </li> </ul>"},{"location":"checklist/msc_thesis/#9-supervisor-specific-requirements","title":"9. Supervisor-Specific Requirements","text":"<ul> <li> Meets all departmental and supervisor guidelines </li> <li> Includes any additional supporting materials (e.g., appendices, technical feasibility reports)  </li> <li> The proposal has been proofread and reviewed multiple times for accuracy and coherence</li> </ul>"},{"location":"checklist/msc_thesis/#msc-thesis-defense-submission-checklist","title":"M.Sc. Thesis Defense Submission Checklist","text":"<p>This checklist ensures that all required materials are submitted and are in a ready state for review before the M.Sc. thesis viva session. Optional items marked. </p>"},{"location":"checklist/msc_thesis/#1-thesis-document","title":"1. Thesis Document","text":"<ul> <li> Finalized thesis document adhering to the department\u2019s formatting guidelines </li> <li> All sections are complete, including the abstract, introduction, literature review, methodology, results, conclusions, and future work  </li> <li> Figures, tables, and equations are numbered and cross-referenced within the text  </li> <li> All references are correctly cited using the specified citation style (e.g., IEEE, ACM, APA, etc.)  </li> <li> Includes a signed plagiarism report or similarity index document as per institutional policy  </li> <li> An approval form signed by the supervisor  </li> </ul>"},{"location":"checklist/msc_thesis/#2-replication-package","title":"2. Replication Package","text":"<ul> <li> Complete source code of the developed algorithm, tool, or software  </li> <li> Dataset(s) used for training, validation, testing, or experiments  </li> <li> Parameter settings and configurations for the proposed algorithm or tool  </li> <li> Log files or raw results from experiments (if exists any)  </li> <li> Scripts for data preprocessing, analysis, or result generation  (if exists any)</li> <li> Any proprietary tools or libraries are accompanied by license information (if applicable)  </li> </ul>"},{"location":"checklist/msc_thesis/#3-running-instructions","title":"3. Running Instructions","text":"<ul> <li> A clear README file explaining how to set up and run the replication package  </li> <li> Details of the runtime environment, including operating system, software dependencies, and versions  </li> <li> Step-by-step instructions for replicating key results or validating claims made in the thesis  </li> <li> Includes sample input files and output examples for verification  </li> </ul>"},{"location":"checklist/msc_thesis/#4-technical-documentation-optional","title":"4. Technical Documentation (Optional)","text":"<ul> <li> Functional and technical documentation for the developed system, tool, or algorithm  </li> <li> Includes descriptions of the system\u2019s architecture, design, or flowcharts (where applicable)  </li> <li> UML diagrams or equivalent visual representations (if needed)  </li> <li> Performance analysis or evaluations that support the claims in the thesis  </li> </ul>"},{"location":"checklist/msc_thesis/#5-presentation-slides","title":"5. Presentation Slides","text":"<ul> <li> Presentation slides for the viva session summarizing the thesis  </li> <li> Covers key areas such as the research problem, methodology, results, and contributions  </li> <li> Includes visuals like charts, graphs, and tables for effective communication  </li> <li> Proofread and rehearsed for clarity and timing  </li> </ul>"},{"location":"checklist/msc_thesis/#6-supporting-documents-optional","title":"6. Supporting Documents (Optional)","text":"<ul> <li> Copies of published papers or conference presentations based on the thesis work (if any)  </li> <li> Permission letters for using proprietary or third-party datasets/tools (if applicable)  </li> <li> Ethics approval forms for human or animal studies (if applicable)  </li> </ul>"},{"location":"checklist/msc_thesis/#7-thesis-submission-formalities","title":"7. Thesis Submission Formalities","text":"<ul> <li> Submission of a soft copy (PDF format) of the thesis and all artifacts to the supervisor  </li> <li> Submission of a printed version (if required) as per institutional policy  </li> <li> Compliance with file naming conventions specified by the department  </li> <li> Submission of all materials through the required platform or method (e.g., email, repository, physical medium)  </li> </ul>"},{"location":"checklist/msc_thesis/#8-poster-for-visual-presentation-optional","title":"8. Poster for Visual Presentation (Optional)","text":"<ul> <li> A well-designed poster summarizing the thesis  </li> <li> Highlights key areas such as objectives, methodology, key results, and contributions  </li> <li> Uses clear and readable formatting with relevant visuals  </li> <li> Prepared for conference or exhibition presentation (if applicable) </li> </ul>"},{"location":"checklist/phd_dissertation/","title":"Ph.D. Dissertation","text":""},{"location":"checklist/phd_dissertation/#proposal-quality-assessment-checklist","title":"Proposal Quality Assessment Checklist","text":"<p>A well-structured proposal is essential for establishing a strong research foundation. This checklist helps ensure the quality of M.Sc. dissertation proposals. It incorporates the higher academic standards and rigor expected of master's-level research while retaining essential structural and formatting guidelines. </p> <p>Students should review each item before submitting their M.Sc. proposal to me.</p>"},{"location":"checklist/phd_dissertation/#1-general-structure-and-formatting","title":"1. General Structure and Formatting","text":"<ul> <li> Title page includes the dissertation title, student\u2019s name, supervisor\u2019s name, and institution details  </li> <li> Uses correct formatting style (e.g., IEEE, ACM, APA) as required by the department  </li> <li> Page numbering, font consistency, and margins are properly set  </li> <li> The English font size is 2pt smaller than the Persian font size (if bilingual)  </li> <li> Uses standard styles in MS Word or a LaTeX engine for typesetting the proposal  </li> <li> All figures and tables have captions and are consistently referred to in the main text</li> <li> Includes a list of abbreviations and acronyms where necessary</li> </ul>"},{"location":"checklist/phd_dissertation/#2-research-problem-and-objectives","title":"2. Research Problem and Objectives","text":"<ul> <li> Clearly defines a significant and novel research problem with academic or industrial relevance</li> <li> At least four contributions (two major contributions and two minor contributions) are mentioned and listed in the introduction</li> <li> Objectives are precise, measurable, and aligned with the research problem </li> <li> Proposal explains why the problem is worth investigating and provides a gap analysis </li> </ul>"},{"location":"checklist/phd_dissertation/#3-background-and-literature-review","title":"3. Background and Literature Review","text":"<ul> <li> Provides sufficient technical and theoretical background for understanding the research context  </li> <li> Literature review critically evaluates key research papers, theories, and methodologies </li> <li> Identifies gaps in existing work and explains how the research will address them  </li> <li> Cites references correctly using the required citation style  </li> <li> Includes state-of-the-art publications (within the last 2 years)  </li> <li> Base papers are selected from top-tier journals or conferences in computer science </li> </ul>"},{"location":"checklist/phd_dissertation/#4-proposed-methodology","title":"4. Proposed Methodology","text":"<ul> <li> Clearly outlines the methodology (e.g., system design, algorithm development, empirical study)  </li> <li> Specifies data sources, tools, technologies, frameworks, or programming languages used  </li> <li> Defines the evaluation metrics or criteria for success (e.g., scalability, accuracy, precision)  </li> <li> Identifies limitations, assumptions, and challenges in implementation  </li> <li> Utilizes appropriate UML diagrams, flowcharts, or system architectures for clarity  </li> </ul>"},{"location":"checklist/phd_dissertation/#5-expected-outcomes-and-contributions","title":"5. Expected Outcomes and Contributions","text":"<ul> <li> States the expected scientific contributions and their impact on the field of computer science  </li> <li> Explains how results will be validated (e.g., experimental testing, comparative analysis)  </li> <li> Discusses potential real-world applications or societal impacts of the research  </li> </ul>"},{"location":"checklist/phd_dissertation/#6-ethical-and-practical-considerations","title":"6. Ethical and Practical Considerations","text":"<ul> <li> Addresses any ethical concerns related to data usage, privacy, security, or AI bias  </li> <li> Defines any required approvals, such as institutional ethics reviews (if applicable)  </li> <li> Confirms feasibility based on available resources, time, and expertise </li> </ul>"},{"location":"checklist/phd_dissertation/#7-timeline-and-work-plan","title":"7. Timeline and Work Plan","text":"<ul> <li> Presents a comprehensive timeline with milestones for each major phase (using a Gantt chart or similar)  </li> <li> Includes detailed phases such as literature review, methodology design, implementation, testing, and dissertation writing  </li> <li> Demonstrates realistic scheduling to avoid delays  </li> </ul>"},{"location":"checklist/phd_dissertation/#8-writing-quality-and-clarity","title":"8. Writing Quality and Clarity","text":"<ul> <li> Ensures the proposal is logically organized with clear transitions between sections  </li> <li> Uses formal, precise, and professional language free from grammatical errors  </li> <li> Avoids redundancy and minimizes technical jargon where unnecessary  </li> </ul>"},{"location":"checklist/phd_dissertation/#9-supervisor-specific-requirements","title":"9. Supervisor-Specific Requirements","text":"<ul> <li> Meets all departmental and supervisor guidelines </li> <li> Includes any additional supporting materials (e.g., appendices, technical feasibility reports)  </li> <li> The proposal has been proofread and reviewed multiple times for accuracy and coherence</li> </ul>"},{"location":"checklist/phd_dissertation/#defense-submission-checklist","title":"Defense Submission Checklist","text":"<p>This checklist ensures that all required materials are submitted and are in a ready state for review before the M.Sc. dissertation viva session. Optional items marked. </p>"},{"location":"checklist/phd_dissertation/#1-dissertation-document","title":"1. Dissertation Document","text":"<ul> <li> Finalized dissertation document adhering to the department\u2019s formatting guidelines </li> <li> All sections are complete, including the abstract, introduction, literature review, methodology, results, conclusions, and future work  </li> <li> Figures, tables, and equations are numbered and cross-referenced within the text  </li> <li> All references are correctly cited using the specified citation style (e.g., IEEE, ACM, APA, etc.)  </li> <li> Includes a signed plagiarism report or similarity index document as per institutional policy  </li> <li> An approval form signed by the supervisor  </li> </ul>"},{"location":"checklist/phd_dissertation/#2-replication-package","title":"2. Replication Package","text":"<ul> <li> Complete source code of the developed algorithm, tool, or software  </li> <li> Dataset(s) used for training, validation, testing, or experiments  </li> <li> Parameter settings and configurations for the proposed algorithm or tool  </li> <li> Log files or raw results from experiments (if exists any)  </li> <li> Scripts for data preprocessing, analysis, or result generation  (if exists any)</li> <li> Any proprietary tools or libraries are accompanied by license information (if applicable)  </li> </ul>"},{"location":"checklist/phd_dissertation/#3-running-instructions","title":"3. Running Instructions","text":"<ul> <li> A clear README file explaining how to set up and run the replication package  </li> <li> Details of the runtime environment, including operating system, software dependencies, and versions  </li> <li> Step-by-step instructions for replicating key results or validating claims made in the dissertation  </li> <li> Includes sample input files and output examples for verification  </li> </ul>"},{"location":"checklist/phd_dissertation/#4-technical-documentation-optional","title":"4. Technical Documentation (Optional)","text":"<ul> <li> Functional and technical documentation for the developed system, tool, or algorithm  </li> <li> Includes descriptions of the system\u2019s architecture, design, or flowcharts (where applicable)  </li> <li> UML diagrams or equivalent visual representations (if needed)  </li> <li> Performance analysis or evaluations that support the claims in the dissertation  </li> </ul>"},{"location":"checklist/phd_dissertation/#5-presentation-slides","title":"5. Presentation Slides","text":"<ul> <li> Presentation slides for the viva session summarizing the dissertation  </li> <li> Covers key areas such as the research problem, methodology, results, and contributions  </li> <li> Includes visuals like charts, graphs, and tables for effective communication  </li> <li> Proofread and rehearsed for clarity and timing  </li> </ul>"},{"location":"checklist/phd_dissertation/#6-supporting-documents","title":"6. Supporting Documents","text":"<ul> <li> Copies of published papers or conference presentations based on the dissertation work (if any)  </li> <li> Permission letters for using proprietary or third-party datasets/tools (if applicable)  </li> <li> Ethics approval forms for human or animal studies (if applicable)  </li> </ul>"},{"location":"checklist/phd_dissertation/#7-dissertation-submission-formalities","title":"7. Dissertation Submission Formalities","text":"<ul> <li> Submission of a soft copy (PDF format) of the dissertation and all artifacts to the supervisor  </li> <li> Submission of a printed version (if required) as per institutional policy  </li> <li> Compliance with file naming conventions specified by the department  </li> <li> Submission of all materials through the required platform or method (e.g., email, repository, physical medium)  </li> </ul>"},{"location":"checklist/phd_dissertation/#8-poster-for-visual-presentation-optional","title":"8. Poster for Visual Presentation (Optional)","text":"<ul> <li> A well-designed poster summarizing the thesis  </li> <li> Highlights key areas such as objectives, methodology, key results, and contributions  </li> <li> Uses clear and readable formatting with relevant visuals  </li> <li> Prepared for conference or exhibition presentation (if applicable)  </li> </ul>"},{"location":"research/","title":"Research","text":"<p>The Intelligent Software Engineering Research Laboratory (ISERL) hosts research and development projects in the fields of software engineering, software optimization, intelligent systems architecture, data analysis, and artificial intelligence. The results of these projects are primarily published in the most prestigious journals and conferences in the computer science and engineering.</p>"},{"location":"research/#research-and-educational-groups","title":"Research and Educational Groups","text":"<p>ISERL's research is organized into three specialized groups: the Software Testing and Debugging Group, which enhances software reliability through automated testing, fault localization, and security analysis; the Software Design and Architecture Group, which focuses on refactoring, reengineering, and quality assessment to improve software maintainability; and the Software Methodologies and Requirements Engineering Group, which advances agile practices, requirements traceability, and conceptual modeling to refine development processes. Together, these groups drive innovation in software engineering, ensuring high-quality, efficient, and scalable systems.</p>"},{"location":"research/#software-testing-and-debugging-group","title":"Software Testing and Debugging Group","text":"<ul> <li> <p>Automated test data and oracle generation, input fuzzing, input domain analysis, GUI testing, symbolic and concolic execution, security testing, metamorphic testing, in-vivo testing, test suit minimization, test case prioritization and selection, and test set amplification.</p> </li> <li> <p>Automated fault localization, fault (bug) prediction, vulnerability prediction, software anomaly detection, program instrumentation, dynamic program analysis, taint analysis, and patch generation.</p> </li> </ul>"},{"location":"research/#software-design-and-architecture-group","title":"Software Design and Architecture Group","text":"<ul> <li> <p>Automated refactoring, software clustering, remodularization, reengineering, reverse engineering, static program analysis, program transformation, program optimization, design automation, and inverse design.</p> </li> <li> <p>Code smells prediction, design smells detection, design pattern detection, clean code and clean architecture evaluation, architecture smells detection, code clone detection, source code representation and similarity measurement, software benchmarking, and quality attributes measurement and improvement.</p> </li> </ul>"},{"location":"research/#software-methodologies-and-requirements-engineering-group","title":"Software Methodologies and Requirements Engineering Group","text":"<ul> <li> <p>Requirements smell detection, requirements traceability links prediction, conceptual model generation, code generation, comment generation, and acceptance test criteria generation.</p> </li> <li> <p>Agile methodologies and practices (TDD, BDD, DDD), DevOps, MLOps, CICD, domain-specific languages, and technical debt measurement.</p> </li> </ul>"},{"location":"research/#research-projects-and-products","title":"Research Projects and Products","text":"<ul> <li>OpenUnderstand: Code search engine</li> <li>CodART: Refactoring engine</li> <li>QualCode: ISO/IEC 25010 implementation</li> <li>QualityMetter: Quality attributes measurement</li> <li>ADAFEST: Testability prediction</li> <li>ARTA: Requirement analysis engine</li> <li>DeepFuzz: PDF input fuzzing</li> <li>NEXMA: Non-executable malware analysis</li> <li>TsDD: Testability-driven development apparatus</li> </ul>"},{"location":"research/#underlying-techniques","title":"Underlying Techniques","text":"<ul> <li>Compilers, transpilers, complex graph analysis, evolutionary algorithms, machine learning, deep learning, natural language processing, and statistical analysis.</li> </ul>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/category/blog/","title":"Blog","text":""}]}